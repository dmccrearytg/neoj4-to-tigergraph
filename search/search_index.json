{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"about/","title":"About the Neo4j to TigerGraph Agent","text":"<p>This is a sample project to demonstrate how intelligent agents work with TigerGraph.  Our task is to take a running Neo4j database and create a running TigerGraph database from that system.</p> <p>Our agent will take the following steps:</p> <ol> <li>Extract the full graph schema from Neo4j using the APOC library</li> <li>Convert schema to TigerGraph GSQL </li> <li>Test GSQL syntax </li> <li>Convert Cypher to GSQL </li> <li>Extract Data from Neo4j is a series of CSV files for each vertex and edge</li> <li>Create loading jobs to load vertices and then edges</li> <li>Load data into TigerGraph </li> <li>Test queries on data</li> <li>Execute performance test</li> </ol>"},{"location":"about/#history","title":"History","text":"<p>Omar  idea for this agent was </p>"},{"location":"architecture/","title":"Intelligent Agent Architecture","text":""},{"location":"architecture/#overall-structure","title":"Overall Structure","text":"<p>The conversion</p> <ol> <li> <p>Input Interface:</p> </li> <li> <p>API or CLI to receive input (Neo4j connection details, TigerGraph connection details, etc.)</p> </li> <li> <p>Processing Modules:</p> </li> <li> <p>Schema Extraction Module: Uses Neo4j APOC procedures to extract the schema.</p> </li> <li> <p>Schema Conversion Module: Converts the extracted Neo4j schema to TigerGraph GSQL.</p> </li> <li> <p>Syntax Testing Module: Tests the generated GSQL syntax.</p> </li> <li> <p>Query Conversion Module: Converts Cypher queries to GSQL.</p> </li> <li> <p>Data Extraction Module: Extracts data from Neo4j.</p> </li> <li> <p>Data Loading Module: Loads data into TigerGraph.</p> </li> <li> <p>Query Testing Module: Tests the queries on the TigerGraph database.</p> </li> <li> <p>Control Flow:</p> </li> <li> <p>Orchestration logic to manage the workflow and data flow between modules.</p> </li> <li> <p>Error handling and logging mechanisms.</p> </li> <li> <p>User notification system (for progress updates and error reporting).</p> </li> <li> <p>Output Interface:</p> </li> <li> <p>API or CLI to provide feedback and results (schema conversion status, data loading status, etc.)</p> </li> </ol>"},{"location":"contact/","title":"Contact","text":"<p>Dan McCreary LinkedIn</p>"},{"location":"sample-databases/","title":"Sample Neo4j to TigerGraph Conversion Databases","text":"<p>Here are some of the most common graph database training sets used in  beginning graph database training courses.\u00a0  We should test the agent on these simple databases first.</p> <ol> <li> <p>Friends Network</p> </li> <li> <p>Key Vertex Types: Person</p> </li> <li> <p>Description: This dataset involves a simple social network where each person connects to others through FRIEND_OF relationships. It's useful for teaching basic graph traversal, finding shortest paths, and community detection algorithms.</p> </li> <li> <p>Movie Recommendation</p> </li> <li> <p>Key Vertex Types: Movie, Person</p> </li> <li> <p>Description: This dataset includes people and the movies they like. It is used to teach recommendation algorithms, collaborative filtering, and basic graph analytics such as finding similar users or movies.</p> </li> <li> <p>Employee Hierarchy</p> </li> <li> <p>Key Vertex Types: Employee, Department</p> </li> <li> <p>Description: This dataset represents an organizational structure where employees belong to departments with a hierarchical reporting structure (MANAGES relationships). It is used to demonstrate hierarchical queries, pathfinding, and organizational analytics.</p> </li> <li> <p>E-commerce Transactions</p> </li> <li>Key Vertex Types: Customer, Product, Transaction</li> <li> <p>Description: This dataset captures customers and their transactions with products. It is ideal for teaching fraud detection, market basket analysis, and recommendation systems in an e-commerce context.</p> </li> <li> <p>Knowledge Graph Builder</p> </li> <li> <p>Key Vertex Types: Document, Chuck, Entity, Concept</p> </li> <li> <p>Description: This dataset represents a domain of knowledge in which entities are linked to concepts and other entities (RELATED_TO, BELONGS_TO relationships). It demonstrates semantic search, ontology management, and inference over a graph.</p> </li> <li> <p>Citation Network</p> </li> <li> <p>Key Vertex Types: Paper, Author, Journal</p> </li> <li> <p>Description: This dataset includes academic papers, their authors, and the journals where they are published, with CITED_BY relationships between papers. It is used to teach bibliometric analysis, finding influential papers, and co-authorship networks.</p> </li> <li> <p>IT Infrastructure Network</p> </li> <li> <p>Key Vertex Types: Device, Application, User, Change, Server, MicroService, Vulnerability, Threat</p> </li> <li> <p>Description: This dataset models an IT infrastructure connecting devices, applications, and users (CONNECTED_TO, USED_BY relationships). It teaches network topology, security analysis, and impact assessment of outages.</p> </li> <li> <p>Supply Chain</p> </li> <li> <p>Key Vertex Types: Supplier, Product, Shipment</p> </li> <li> <p>Description: This dataset tracks suppliers, the products they supply, and shipments between entities. It is used to demonstrate supply chain management, tracing product origins, and optimizing logistics.</p> </li> <li> <p>Financial Network</p> </li> <li> <p>Key Vertex Types: Account, Transaction, Customer</p> </li> <li> <p>Description: This dataset captures financial accounts, transactions between them, and the customers who own the accounts. It is ideal for teaching money laundering detection, transaction analysis, and customer relationship management.</p> </li> <li> <p>Gene Interaction Network</p> </li> <li> <p>Key Vertex Types: Gene, Protein</p> </li> <li> <p>Description: This dataset includes genes and proteins with interactions (INTERACTS_WITH relationships). It is used for teaching biological network analysis, pathway identification, and drug target discovery.</p> </li> <li> <p>Event Log</p> </li> <li> <p>Key Vertex Types: Event, User, Resource</p> </li> <li> <p>Description: This dataset models events in a system, with users triggering events and resources being affected. It is useful for teaching event correlation, anomaly detection, and user behavior analysis.</p> </li> <li> <p>Urban Transportation Network</p> </li> <li> <p>Key Vertex Types: Station, Route, Vehicle</p> </li> <li>Description: This dataset represents a city's transportation system with stations, routes, and vehicles (CONNECTED_TO, SERVED_BY relationships). It is used to teach route optimization, traffic analysis, and public transport efficiency.</li> </ol> <p>These datasets provide a wide range of real-world scenarios to help beginners understand the applications and analytical capabilities of graph databases.</p>"},{"location":"steps/","title":"Agent Steps","text":""},{"location":"steps/#phase-1-extract-schema-from-neo4j-using-apoc","title":"Phase 1: Extract Schema from Neo4j using APOC","text":"<ol> <li> <p>Connect to Neo4j: Establish a connection using the provided Neo4j credentials.</p> </li> <li> <p>Extract Schema: Use APOC procedures to extract the schema.</p> </li> <li> <p>CALL apoc.meta.schema()</p> </li> <li> <p>Store Schema: Save the extracted schema in a suitable format (e.g., JSON).</p> </li> </ol>"},{"location":"steps/#phase-2-convert-schema-to-tigergraph-gsql","title":"Phase 2: Convert Schema to TigerGraph GSQL","text":"<ol> <li> <p>Parse Neo4j Schema: Read the extracted schema.</p> </li> <li> <p>Map to GSQL Schema: Create mappings from Neo4j types and relationships to TigerGraph types and edges.</p> </li> <li> <p>Generate GSQL Schema: Write the GSQL schema based on the mappings.</p> </li> <li> <p>Store GSQL Schema: Save the generated GSQL schema for further use.</p> </li> </ol>"},{"location":"steps/#phase-3-test-gsql-syntax","title":"Phase 3: Test GSQL Syntax","text":"<ol> <li> <p>Connect to TigerGraph: Establish a connection using the provided TigerGraph credentials.</p> </li> <li> <p>Deploy Schema: Use the GSQL interface to deploy the schema.</p> </li> <li> <p>Validate Deployment: Check for syntax errors and confirm the schema is correctly deployed.</p> </li> </ol>"},{"location":"steps/#phase-4-convert-cypher-to-gsql","title":"Phase 4: Convert Cypher to GSQL","text":"<ol> <li> <p>Identify Cypher Queries: Collect Cypher queries that need to be converted.</p> </li> <li> <p>Parse Cypher Queries: Analyze the structure of the Cypher queries.</p> </li> <li> <p>Map to GSQL Queries: Create mappings from Cypher query patterns to GSQL query patterns.</p> </li> <li> <p>Generate GSQL Queries: Write the GSQL queries based on the mappings.</p> </li> <li> <p>Store GSQL Queries: Save the generated GSQL queries for further use.</p> </li> </ol>"},{"location":"steps/#phase-5-extract-data-from-neo4j","title":"Phase 5: Extract Data from Neo4j","text":"<ol> <li> <p>Connect to Neo4j: Reuse the Neo4j connection.</p> </li> <li> <p>Export Data: Extract data from Neo4j using Cypher queries or APOC procedures.</p> </li> <li> <p>CALL apoc.export.csv.all()</p> </li> <li> <p>Store Data: Save the extracted data in a suitable format (e.g., CSV).</p> </li> </ol>"},{"location":"steps/#phase-6-load-data-into-tigergraph","title":"Phase 6: Load Data into TigerGraph","text":"<ol> <li> <p>Connect to TigerGraph: Reuse the TigerGraph connection.</p> </li> <li> <p>Load Data: Use the GSQL interface to load the extracted data.</p> </li> <li> <p>LOAD CSV ...</p> </li> <li> <p>Validate Data Load: Confirm the data is correctly loaded into TigerGraph.</p> </li> </ol>"},{"location":"steps/#phase-7-test-queries","title":"Phase 7: Test Queries","text":"<ol> <li> <p>Run GSQL Queries: Execute the converted GSQL queries on the TigerGraph database.</p> </li> <li> <p>Validate Results: Compare the results with expected outcomes or results from Neo4j.</p> </li> <li> <p>Adjust and Optimize: Make necessary adjustments and optimize the queries as needed.</p> </li> </ol> <p>**</p>"}]}